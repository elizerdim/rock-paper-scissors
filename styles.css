*, ::after, ::before {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  /* Primary */
  --scissors-gradient-1: hsl(39, 89%, 45%);
  --scissors-gradient-2: hsl(40, 84%, 53%);
  --paper-gradient-1: hsl(230, 89%, 60%);
  --paper-gradient-2: hsl(230, 89%, 65%);
  --rock-gradient-1: hsl(349, 71%, 48%);
  --rock-gradient-2: hsl(349, 70%, 56%);
  --white: white;

  /* Neutral */
  --dark-text: hsl(229, 25%, 31%); 
  --score-text: hsl(229, 64%, 46%);
  --header-outline: hsl(217, 16%, 45%);

  /* Background */
  --radial-gradient-1: hsl(214, 47%, 23%);
  --radial-gradient-2: hsl(237, 49%, 15%);
  --background-triangle: hsla(0, 0%, 0%, .2);

  /* Outlines */
  --outline-1: hsla(0, 0%, 100%, 0.03); 
  --outline-2: hsla(0, 0%, 100%, 0.05); 
  --outline-3: hsla(0, 0%, 100%, 0.07); 

  --button-variable: 12px;
}

body {
  font-family: "Barlow Semi Condensed", sans-serif;
  background: radial-gradient(134.34% 134.34% at 50% 0%, var(--radial-gradient-1) 0%, var(--radial-gradient-2) 100%);
  text-transform: uppercase;
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

button {
  text-transform: inherit;
  font-family: inherit;
}

body > * {
  display: flex;
  justify-content: center;
  align-items: center;
}

.primary-header {
  border: 2px solid var(--header-outline);
  border-radius: 5px;
  display: flex;
  justify-content: space-between;
  padding: .75em .75em .75em 1em;
  width: 100%;
  max-width: 75%;
  margin: 2em auto;
}

.primary-header__title {
  line-height: .8em;
  font-weight: 600;
  color: var(--white);
  font-size: 1.2em;
  font-weight: 700;
  line-height: .8em;
  letter-spacing: .05em;
  text-shadow: 0px 3px 3px rgba(0, 0, 0, 0.20);
  align-self: center;
}

.score {
  background-color: var(--white);
  text-align: center;
  border-radius: 4px;
  padding: .625em 1em;
}

.score__title {
  color: var(--score-text);
  font-size: .8em;
  letter-spacing: .1em;
}

.score__description {
  color: var(--dark-text);
  font-size: 2em;
  font-weight: 700;
  line-height: .8em;
  margin-top: .1em;
}

main {
  flex-grow: 1;
}

.game {
  aspect-ratio: 1 / 1;
  margin: 0 auto;
  display: grid;
  grid-template: repeat(2, 1fr) / repeat(2, 1fr);
  column-gap: 40px;
  position: relative;
}

.game::before {
  /* width to height ratio of an equilateral triangle is 100/86.6 */
  content: "";
  display: block;
  width: 200px;
  height: 173.2px;
  position: absolute;
  top: calc(50% - 86.6px);
  left: calc(50% - 100px);
  z-index: -1;
  background:
    linear-gradient(to top left,
      transparent 49.5%, var(--background-triangle) 50% calc(50% + 15px),
      transparent calc(50% + 15px + 1px)) right/50% 100%,
    linear-gradient(to top right,
      transparent 49.5%,var(--background-triangle) 50% calc(50% + 15px),
      transparent calc(50% + 15px + 1px)) left/50% 100%,
    linear-gradient(var(--background-triangle), var(--background-triangle)) top/calc(100% - 20px) 15px;
  background-repeat: no-repeat;
}

.game__btn,
.result__choice {
  width: calc(var(--button-variable) * 10);
  aspect-ratio: 1 / 1;
  background-color: var(--white);
  border-radius: 1000px;
  place-self: center;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0 auto;
}

.paper {
  border: var(--button-variable) solid var(--paper-gradient-2);
  box-shadow: 0px calc(var(--button-variable) / 2) var(--paper-gradient-1),
    inset 0px calc(var(--button-variable) / 3) hsla(0, 0%, 0%, .2);
}

.scissors {
  border: var(--button-variable) solid var(--scissors-gradient-2);
  box-shadow: 0px calc(var(--button-variable) / 2) var(--scissors-gradient-1),
    inset 0px calc(var(--button-variable) / 3) hsla(0, 0%, 0%, .2);
}

.rock {
  border: var(--button-variable) solid var(--rock-gradient-2);
  box-shadow: 0px calc(var(--button-variable) / 2) var(--rock-gradient-1),
    inset 0px calc(var(--button-variable) / 3) hsla(0, 0%, 0%, .2);
  grid-column: span 2;
}

.game__btn svg,
.result__choice svg {
  fill: var(--radial-gradient-1);
  height: 45%;
}

.paper-img {
  transform: rotate(-15deg);
}

.rock-img {
  transform: rotate(30deg);
}

.result {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  column-gap: 40px;
}

.result__section--computer {
  justify-self: center;
  align-self: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.loading {
  width: calc(var(--button-variable) * 10 - var(--button-variable));
  aspect-ratio: 1 / 1;
  background-color: var(--radial-gradient-2);
  border-radius: 100%;
  margin-top: 12px;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* loading animation code taken from https://loading.io/css/ -- adjusted for responsiveness*/
.loading__lds-dual-ring {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 80%;
  aspect-ratio: 1 / 1;
}

.loading__lds-dual-ring:after {
  content: " ";
  display: block;
  width: 64%;
  aspect-ratio: 1 / 1;
  margin: 8px;
  border-radius: 50%;
  border: 6px solid #fff;
  border-color: #fff transparent #fff transparent;
  animation: lds-dual-ring 1.2s linear infinite;
}

@keyframes lds-dual-ring {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.winner::before {
  content: "";
  display: block;
  width: calc(var(--button-variable) * 20);
  height: calc(var(--button-variable) * 20);
  background: radial-gradient(
    hsla(0, 0%, 100%, .08), 
    hsla(0, 0%, 100%, .08) 50%, 
    hsla(0, 0%, 100%, .05) 50%, 
    hsla(0, 0%, 100%, .05) 60%,
    hsla(0, 0%, 100%, .03) 60%,
    hsla(0, 0%, 100%, .03) 100%
  );
  position: absolute;
  z-index: -1;
  border-radius: 100%;
}

.result__description,
.outcome__description {
  color: var(--white);
  text-align: center;
}

.result__description {
  margin-top: calc(1em + 6px);
  letter-spacing: 1.875px;
}

.outcome {
  grid-column: span 2;
}

.outcome__description {
  font-size: 3.5em;
  margin-top: .5em;
}

.play-again-btn {
  display: block;
  margin: 0 auto;
  border: none;
  background-color: var(--white);
  color: var(--dark-text);
  padding: .8em 3.5em;
  margin-top: 1em;
  letter-spacing: 2.5px;
  border-radius: 8px;
}

.hidden {
  display: none;
}

.rules {
  position: absolute;
  background-color: var(--white);
  padding: 1em 1em 2em;
  text-align: center;
  width: min-content;
}

.rules__close-btn {
  background-color: transparent;
  border: none;
  display: block;
  margin-left: auto;
}

.rules__close-btn svg {
  width: 25px;
}

.rules__title {
  font-size: 2em;
  margin-bottom: 1.5em;
}

.rules__description {
  display: grid;
  grid-template-columns: repeat(5, auto);
  grid-template-rows: repeat(3, auto) repeat(2, 1fr);
  grid-template-areas:
    "p p a1 s s"
    "p p a1 s s"
    "a2 a2 . a3 a3"
    ". r r r ."
    ". r r r .";
  width: 280px;
  margin: 0 auto;
}

.rules__description p {
  color: var(--header-outline)
}

.rules__img {
  width: 100px;
  aspect-ratio: 1 / 1;
  border-radius: 1000px;
  place-self: center;
  display: flex;
  justify-content: center;
  align-items: center;
}

.rules__img--paper {
  grid-area: p;
}

.rules__img--scissors {
  grid-area: s;
}

.rules__img--rock {
  grid-area: r;
  margin-top: -20px;
}

.arrow-1 {
  grid-area: a1;
  align-self: center;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1em;
  margin-top: -3em;
}

.arrow-2 {
  grid-area: a2;
  align-self: center;
  display: flex;
  align-items: center;
}

.arrow-2 svg {
  transform: rotate(-120deg);
}

.arrow-3 {
  grid-area: a3;
  align-self: center;
  display: flex;
  flex-direction: row-reverse;
  align-items: center;
}

.arrow-3 svg {
  transform: rotate(120deg);
}

.rules__img {
  border: 10px solid var(--header-outline);
  background-color: #E1E4ED;
}

.rules svg {
  height: 45%;
  fill: var(--header-outline);
}

.arrow svg {
  flex-shrink: 0;
  width: 50px;
  height: 20px;
}

footer {
  display: flex;
  justify-content: center;
  align-items: center;
}

.rules-btn {
  background-color: transparent;
  border: none;
  color: var(--white);
  border: 1px solid var(--white);
  border-radius: 8px;
  font-style: normal;
  letter-spacing: .15em;
  padding: .6em 2.25em;
  font-weight: 600;
  margin: 3.5em auto;
}

@media only screen and (min-width: 600px) {
  :root {
    --button-variable: 14px;
  }

  .primary-header {
    max-width: min(75%, 700px);
    padding: 1em 1.125em 1em 1.5em;
    border-radius: 15px;
  }

  .primary-header__title {
    font-size: 1.8em;
  }

  .score {
    padding: 1em 2em;
    border-radius: 8px;
  }

  .score__title {
    font-size: 1em;
  }

  .score__description {
    font-size: 3em;
  }

  .game {
    column-gap: 64px;
  }

  .game::before {
    width: 250px;
    height: 216.5px;
    top: calc(50% - 108.25px);
    left: calc(50% - 125px);  
  }

  .result {
    column-gap: 90px;
  }

  .rules {
    width: 400px;
  }

  .rules-btn {
    font-size: 1em;
  }
}

@media only screen and (min-width: 800px) {
  .result {
    grid-template-columns: 1fr max-content 1fr;
  }

  .result__section--computer {
    grid-column: 3 / 4;
  }

  .outcome {
    grid-column: 2 / 3;
    grid-row: 1 / 2;
  }
}

@media only screen and (min-width: 1000px) {
  :root {
    --button-variable: 16px;
  }

  .primary-header {
    max-width: min(75%, 800px);
  }

  .result__section {
    display: flex;
    flex-direction: column-reverse;    
  }

  .result__description {
    font-size: 1.5em;
    margin-top: -4em;
    margin-bottom: 2em;
  }

  .outcome {
    left: 305px;
    top: 30px;
  }

  .rules {
    width: 600px;
  }

  .rules-btn {
    margin: 0 3em 2em auto;
  }
}

/* media rule for hover states */
@media (hover: hover) and (pointer: fine) and (min-width: 500px) {
  .game__btn:hover {
    outline: 30px solid var(--outline-2);
  }

  .play-again-btn:hover {
    color: var(--rock-gradient-1);
  }

  .rules__close-btn:hover svg {
    fill: var(--dark-text);
  }

  .rules-btn:hover {
    background-color: var(--white);
    color: var(--dark-text);
  }
}

/* active states */
.game__btn:active {
  transform: translateY(5px);
}

.play-again-btn:active {
  background-color: transparent;
  outline: 1px solid white;
  color: var(--white);
}

.rules-btn:active {
  background-color: var(--radial-gradient-2);
  color: var(--white);
}